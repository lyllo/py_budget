PARSERS

[x] Cartão BTG (copy/paste do site em txt)
[x] Cartão XP (2 csv)
[x] Cartão GPA (digitação / xls)
        [ ] Implementar CARTÃO e PARCELA para GPA
[x] Cartão Flash (copy/paste do site em txt)
        [x] Corrigir posição da categoria que está vindo em tag
        [x] Corrigir valor positivo do depósito do benefício que está vindo negativo
[x] CC Itaú (1 xls)
        [ ] Cuidado com categorização de item genérico como pagamento de boleto (MOBILEPAG TIT BANCO 033 nem sempre é BEBÊ)
[x] CI BTG (copy/paste do site em txt)
[x] CI Sofisa (copy/paste do site em txt)
[x] CI XP (1 xlsx)
[x] CI Rico (1 xlsx)

BTG (ORIGINAL)

[x] Transformar tipo da Coluna A de texto em data
        Obs. Por acaso a openpyxl chega a funcionar quando o tipo do dado é datetime (SUPERADO)

[x] Transformar tipo da Coluna C de texto em moeda
        Obs. Não tive sucesso com a NumberFormat de numbers de opepyxl, que precisa ser chamada após a célula ter sido criada (SUPERADO)

[x] Preencher campos de CARTAO

[x] Preencher campos de PARCELAS
        [-] Consigo determinar o número de parcelas da compra, mas ainda não a qual parcela se refere aquela transação.
                => No cartão XP vem a informação sobre qual parcela se refere a transação
                => No cartão BTG vem apenas apenas o lançamento da transação total com o número de parcelas
        [x] Estou tratando apenas 1 dígito de parcelas, ou seja, compras em 10x por exemplo, aparecerão com 0 parcelas.
        [x] Eu deveria estar dividindo o valor da compra pelo número de parcelas.

[x] Preencher campos de CATEGORIA (expectativa de que 50% dos registros sejam automaticamente categorizados)
        [x] Carregar dicionário de nomes de Estabelecimentos e suas Categorias a partir do BUDGET.xlsx
        [x] Criar função que consulta a categoria dado o nome do estabelecimento
        [x] Aumentar velocidade do carregamento do dicionário (pre-carregar em um arquivo mais leve?)
        [x]     Buscando nome exato (SW 1.0) => consegui 41,22% de eficiência aqui
        [x]     Depois por similaridade (SW 1.0) => consegui 9,16% de eficiência aqui
        [x]     Deixando os últimos pra AI (SW 3.0) => consegui fazer para 1 registro, próximo passo é implementar para lista a fim de otimizar chamadas
        [x]          Configurar a cor do texto preenchido por AI em vermelho para forçar conferência
        [x]  Jogar tudo pra AI, mesmo sabendo que ficará aprox. 2x mais caro para validar assertividade
                => Não necessário pois nos testes preliminares vi que a IA tem assertividade de 21%. Precisaria fazer algum fine tuning.

[x] Verificar valor da transação (se igual a zero) para não exportá-la para o xlsx.

[x] Verificar status da transação (se negada) para não exportá-la para o xlsx.
        => Passou uma da XP esses dias, que impedia concilar com a fatura

[x] Quando for  primeira parcela de uma transação parcelada, já criar as parcelas dela nos meses seguintes.
        [x] Pintando a fonte de cinza.

[-] Verificar se o arquivo de OUTPUT está aberto antes de tentar fazer operações no mesmo e fechá-lo para o programa não dar erro.
        -> Não é possível em Python fechar uma planilha aberta por outro processo.

GERAL

[x] Criar main que chama todos os módulos
        [x] Verificando se existe o arquivo de entrada
        [ ] Levar os resultados para o arquivo de BUDGET
                [ ] Criar rotina de importação dos dados históricos do BUDGET
        [ ] Calcular valor das faturas com bases nas datas de melhor compra (corte + 1)

[ ] Gerar uma GUI para receber arquivos de entrada

[x] Salvar registros em banco de dados

[ ] Implementar lógica de geração de installments para os cartões XP e GPA

[ ] Criar parser para Holerite (PDF) pois há despesas de SAÚDE, por exemplo lá dentro.
        [ ] Lembrar de remover a transação de pagamento de salário

[ ] Criar mecanismo para abrir transações, como a do pagamento do condomínio, para separar seus componentes (ex: ÁGUA e LUZ).

SEGURANÇA

[ ] Remover chave de API da OpenAI do código
[ ] Remover credenciais do MariaDB do código
        => You can also set them up as environment variables in a .env file for better key and password management

INVESTIMENTOS

[ ] Separar o que é PROVENTOS em Cash (Salário, Benefício) de proventos de investimentos, que ficam nas CI's
[ ] Resolver a questão dos RESGATES e REALOCAÇÕES para ter ideia de quanto está sendo consumido de investimentos para fechar as contas do mês

CONCILIAÇÃO

[ ] Gerar visão de quanto foi transferido entre contas para ver a "SOMA ZERO"
[ ] Gerar visão preditiva e fechada das faturas dos cartões para auxiliar com Fluxo de Caixa